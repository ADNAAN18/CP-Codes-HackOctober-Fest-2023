#include <iostream>
#include <vector>
using namespace std;
int firstOccurance(vector<int> arr, int target, int n)
{
    int start = 0;
    int end = n - 1;
    int mid = start + (end - start) / 2;
    int left = -1;
    while (start <= end)
    {
        if (arr[mid] == target)
        {
            left = mid;
            end = mid - 1;
        }
        else if (arr[mid] > target)
        {
            end = mid - 1;
        }
        else
        {
            start = mid + 1;
        }
        mid = start + (end - start) / 2;
    }
    return left;
}

int lastOccurance(vector<int> arr, int target, int n)
{
    int start1 = 0;
    int end1 = n - 1;
    int mid1 = start1 + (end1 - start1) / 2;
    int right = -1;
    while (start1 <= end1)
    {
        if (arr[mid1] == target)
        {
            right = mid1;
            start1 = mid1 + 1;
        }
        else if (arr[mid1] > target)
        {
            end1 = mid1 - 1;
        }
        else
        {
            start1 = mid1 + 1;
        }
        mid1 = start1 + (end1 - start1) / 2;
    }
    return right;
}
int main()
{
    vector<int>arr{1, 2, 3, 4, 4, 5, 7};
    int n = arr.size();
    int target;
    cout<<"Enter the element from the array to find the first and last position of the target element: ";
    cin>>target;
    cout<<"First Position:-" << firstOccurance(arr, target, n) << endl;
    cout << "Last position:-"<<lastOccurance(arr, target, n) << endl;

    return 0;
}
